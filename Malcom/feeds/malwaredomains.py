import urllib2
import re
from Malcom.model.datatypes import Hostname 
from feed import Feed
import Malcom.auxiliary.toolbox as toolbox

class MalwareDomains(Feed):
	def __init__(self, name):
		super(MalwareDomains, self).__init__(name)
		self.enabled = True

	def update(self):
		try:
			feed = urllib2.urlopen("http://mirror1.malwaredomains.com/files/domains.txt").readlines()
			self.status = "OK"
		except Exception, e:
			self.status = "ERROR: " + str(e)
			return False
		
		for line in feed:	
			self.analyze(line)
		return True

	def analyze(self, line):
		if line.startswith('#') or line.startswith('\n'):
			return

		splitted_mdl = re.split(r'\t+', line.lstrip('\t'))
		# 	20151201	agasi-story.info	malicious	blog.dynamoo.com	20131130	20121201	20120521	20110217

		if unicode(splitted_mdl[0]).isnumeric():
			splitted_mdl.pop(0)

		# Create the new hostname and store it in the DB
		hostname = Hostname(hostname=splitted_mdl[0], tags=['malwaredomains', splitted_mdl[1].lower(), splitted_mdl[2]])

		hostname, status = self.analytics.save_element(hostname, with_status=True)
		if status['updatedExisting'] == False:
			self.elements_fetched += 1


