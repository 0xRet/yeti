from Malcom.model.datatypes import Ip, Url, Hostname, As, Evil 
from Malcom.feeds.feed import Feed

import Malcom.auxiliary.toolbox as toolbox

import urllib2
import re
from bson.json_util import dumps, loads

class MalwareTrafficAnalysis(Feed):
	"""
	This is a feed that will fetch data from a URL and process it
	"""
	def __init__(self, name):
		super(MalwareTrafficAnalysis, self).__init__(name, run_every="12h") 
		
		self.name = "MalwareTrafficAnalysis" 
		self.source = "http://www.malware-traffic-analysis.net/suspicious-ip-addresses-and-domains.txt" 
		self.description = "Collects results from malware-traffic-analysis.net"

	def update(self):
		feed = urllib2.urlopen(self.source).read().split('\n')
		for line in feed[1:]:
			self.analyze(line)

	def analyze(self, line):
		if line.startswith("#"):
			return
		print line
		ip, port, domains, traffic_info, description, date = line.split(',')

		ip = Ip(ip=ip)
		ip = self.model.save(ip)

		port = re.search('[\d]+', port)
		if port: port = port.group()

		domains = [d.strip() for d in domains.split('/')]
		domains = [self.model.add_text([d.split(':')[0]]) for d in domains if d]

		for d in domains:
			self.model.connect(ip, d, 'domain')

		evil = Evil() 
		evil['tags'] = ['MalwareTrafficAnalysis']
		evil['description'] = "{} ({})".format(description, traffic_info)
		evil['value'] = '{} on {}'.format(description, ip['value'])

		self.commit_to_db(ip, evil)

